import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.stereotype.Component;

import com.citigroup.amlcdd.common.constants.EntitlementStatusEnum;
import com.citigroup.amlcdd.framework.context.UserContext;
import com.citigroup.amlcdd.login.service.IUserLogService;


/**
 * @author nb37530
 * Custom authentication provider
 */

@Component
public class CustomAuthenticationProvider implements AuthenticationProvider{
 
	private final Logger logger = LoggerFactory.getLogger(CustomAuthenticationProvider.class);
	
	@Autowired
	@Qualifier("userDetailsService")
	UserDetailsService userDetailsService;
    
	@Autowired
	IUserLogService userLogService;
	
    @Override
    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
          String username = authentication.getName();
          if(logger.isInfoEnabled()){
        	  logger.info("Authenticating user with user id :"+username);
          }
          //String password = (String) authentication.getCredentials();
     
            UserContext user = (UserContext)userDetailsService.loadUserByUsername(username);
     
            if (user == null || !user.getUsername().equalsIgnoreCase(username)) {
            	logger.error("User id not found in the system :"+username);
            	/*if(username == null || (username != null && username.isEmpty())){
            		username = "anonymous";
            	}
            	user = new UserContext(username, "", new HashSet<GrantedAuthority>());
            	user.setErrMessage("User Not Found in the System");
            	userLogService.logUserActivity(user, EntitlementStatusEnum.LOGIN.getVal(), false);*/
                throw new BadCredentialsException("User id not found in the system :"+username);
            }
            if(!user.isAccountEnabled()){
            	logger.error("User is not active :"+username);
            	user.setErrMessage("User is not active in the system");
            	userLogService.logUserActivity(user, EntitlementStatusEnum.LOGIN.getVal(), false);
                throw new BadCredentialsException("User is not active :"+username);
            }
            return new UsernamePasswordAuthenticationToken(user, null, user.getAuthorities());
    }

	@Override
	public boolean supports(Class<?> arg0) {
		return true;
	}
	
}
